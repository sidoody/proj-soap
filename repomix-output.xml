This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    api/
      debug/
        route.ts
      generate/
        route.ts
      review/
        route.ts
    documentation/
      page.tsx
    note/
      [id]/
        page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    ui/
      button.tsx
      card.tsx
      skeleton.tsx
      soap-note.tsx
      textarea.tsx
  lib/
    clipText.ts
    openai.ts
    parseCsv.ts
    prompts.ts
    store.ts
    utils.ts
  types/
    index.ts
.gitignore
.npmrc
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/app/api/debug/route.ts">
import { NextResponse } from "next/server";
import { db } from "@/lib/store";

export function GET(req: Request) {
  const id = new URL(req.url).searchParams.get("id")!;
  const data = db.get(id);
  return data
    ? NextResponse.json(data)
    : NextResponse.json({ error: "not found" }, { status: 404 });
}
</file>

<file path="src/app/api/generate/route.ts">
import { NextResponse } from "next/server";
import { csvToChat } from "@/lib/parseCsv";
import { systemSOAP } from "@/lib/prompts";
import { openai } from "@/lib/openai";
import { newEncounter, db } from "@/lib/store";

export async function POST(req: Request) {
  const { csv } = await req.json();
  const enc = newEncounter(csv);

  const messages = [
    { role: "system" as const, content: systemSOAP },
    ...csvToChat(csv),
  ];

  const completion = await openai.chat.completions.create({
    model: "gpt-4o-mini",
    messages,
    temperature: 0.3,
  });

  const note = completion.choices[0].message.content ?? "";
  db.get(enc.id)!.aiNote = note;

  return NextResponse.json({ id: enc.id, aiNote: note });
}
</file>

<file path="src/components/ui/skeleton.tsx">
export function Skeleton({ className }: { className?: string }) {
  return (
    <div
      className={`animate-pulse rounded-md bg-gray-200 dark:bg-zinc-800 ${className}`}
    />
  );
}
</file>

<file path="src/components/ui/soap-note.tsx">
import ReactMarkdown from "react-markdown";
import { cn } from "@/lib/utils";

interface SOAPNoteProps {
  content: string;
  className?: string;
}

export function SOAPNote({ content, className }: SOAPNoteProps) {
  return (
    <div className={cn("soap-note", className)}>
      <ReactMarkdown
        className="prose prose-slate max-w-none"
        components={{
          // Enhanced heading styling for SOAP sections
          h2: ({ children }) => (
            <h2 className="text-xl font-bold text-gray-900 dark:text-gray-100 mt-8 mb-4 pb-2 border-b-2 border-blue-200 dark:border-blue-700 first:mt-0">
              {children}
            </h2>
          ),
          h3: ({ children }) => (
            <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200 mt-6 mb-3">
              {children}
            </h3>
          ),
          // Enhanced paragraph styling with better spacing
          p: ({ children }) => (
            <p className="text-gray-700 dark:text-gray-300 leading-relaxed mb-4 text-base">
              {children}
            </p>
          ),
          // Enhanced list styling for medical bullet points
          ul: ({ children }) => (
            <ul className="space-y-2 mb-6 ml-4">
              {children}
            </ul>
          ),
          li: ({ children }) => (
            <li className="text-gray-700 dark:text-gray-300 leading-relaxed flex items-start">
              <span className="text-blue-600 dark:text-blue-400 font-bold mr-3 mt-1 text-sm">•</span>
              <span className="flex-1">{children}</span>
            </li>
          ),
          // Enhanced strong/bold text for medical emphasis
          strong: ({ children }) => (
            <strong className="font-semibold text-gray-900 dark:text-gray-100">
              {children}
            </strong>
          ),
          // Enhanced em/italic for medical terminology
          em: ({ children }) => (
            <em className="italic text-gray-800 dark:text-gray-200">
              {children}
            </em>
          ),
          // Code blocks for measurements/values
          code: ({ children }) => (
            <code className="bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded text-sm font-mono">
              {children}
            </code>
          ),
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
}
</file>

<file path="src/lib/clipText.ts">
/** Clip a string to ~8k GPT tokens (~32k chars), keeping start & end. */
export function clipText(s: string, maxChars = 32000) {
  if (s.length <= maxChars) return s;
  const head = s.slice(0, maxChars / 2);
  const tail = s.slice(-maxChars / 2);
  return head + "\n...\n[snip]\n...\n" + tail;
}
</file>

<file path="src/lib/openai.ts">
import OpenAI from "openai";

export const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});
</file>

<file path="src/types/index.ts">
export interface ReviewChange {
  dimension: string;
  impact: string;
  snippet: string;
  comment: string;
}

export interface ReviewDimension {
  [key: string]: number | undefined;
  up_to_date?: number;
  accurate?: number;
  thorough?: number;
  useful?: number;
  organized?: number;
  comprehensible?: number;
  succinct?: number;
  synthesized?: number;
  consistent?: number;
}

export interface Review {
  changes: ReviewChange[];
  dimensions: ReviewDimension;
  baseline_scores?: ReviewDimension;
  student_scores?: ReviewDimension;
  delta_scores?: ReviewDimension;
  global_comment?: string;
}
</file>

<file path=".npmrc">
legacy-peer-deps=true
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path="src/components/ui/card.tsx">
import { cn } from "@/lib/utils";

export function Card({
  className,
  children,
}: {
  className?: string;
  children: React.ReactNode;
}) {
  return (
    <div
      className={cn(
        "rounded-xl bg-white shadow-lg dark:bg-zinc-900 p-6",
        className
      )}
    >
      {children}
    </div>
  );
}
</file>

<file path="src/components/ui/textarea.tsx">
import { forwardRef, TextareaHTMLAttributes } from "react";
import { cn } from "@/lib/utils";

export const Textarea = forwardRef<
  HTMLTextAreaElement,
  TextareaHTMLAttributes<HTMLTextAreaElement>
>(({ className, ...props }, ref) => (
  <textarea
    ref={ref}
    className={cn(
      "w-full rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 p-3 text-sm shadow-sm placeholder:text-gray-500 dark:placeholder:text-gray-400 focus-visible:ring-2 focus-visible:ring-gray-400 dark:focus-visible:ring-gray-500 focus-visible:outline-none",
      className
    )}
    {...props}
  />
));
Textarea.displayName = "Textarea";
</file>

<file path="src/lib/parseCsv.ts">
import Papa from "papaparse";
import type { ChatCompletionMessageParam } from "openai/resources";

export function csvToChat(csv: string): ChatCompletionMessageParam[] {
  const { data } = Papa.parse<string[]>(csv.trim(), { header: false });
  return (data as string[][])
    .map(r => r[0])
    .filter(Boolean)
    .map(line => {
      const [, speaker, content] =
        line.match(/\]\s*(User|Assistant):\s*(.*)$/i) ?? [];
      const name =
        speaker?.toLowerCase() === "assistant" ? "patient" : "clinician";
      return {
        role: "user",
        name,          // so GPT knows who's talking
        content: content ?? line,
      } as ChatCompletionMessageParam;
    });
}
</file>

<file path="src/lib/prompts.ts">
export const systemSOAP = `
You are a meticulous medical scribe. From the **patient’s statements _and_ all actions ALREADY performed in this encounter** (ignore clinician questions), craft a concise **markdown** SOAP note.

## S – Subjective

**HPI (paragraph)** – Chief complaint, onset/chronology, quality, radiation, aggravating & relieving factors, pertinent positives **and** negatives, medication & risk-factor context.  
**ROS (≤ 6 bullets)** – Focused positives/negatives not already in HPI.

## O – Objective (≤ 6 bullets total)

• **Vitals**: write all provided vitals or “—”  
• **Physical Exam**: focused findings or “—”  
• **Diagnostics**: include **every** EKG/lab/imaging result mentioned; collapse duplicates (e.g., “ECG: ST-elevation V2–V4, T-wave inversion III”). Use “—” if none.

## A – Assessment

1–2 sentences: patient profile, pivotal findings, **ranked** leading differential (e.g., “ACS > unstable angina > pericarditis”).

## P – Plan

### Completed (what _has already been done_)  
• List interventions that the transcript shows were **ordered _and_ acknowledged as carried out** (keywords: *administered, started, given, established, attached, initiated*).  
*Do **not** list these again in “Next”.*

### Next (what is still pending)  
• Diagnostics, therapeutics, disposition **not yet performed** (≤ 6 bullets combined with “Completed”).  
Use “—” if nothing remains.

---

### Formatting rules
• Third-person throughout (“Mr. Jones states …”).  
• ≤ 6 bullets in ROS, Objective, and **combined** Plan sections.  
• Use “—” when information is absent; never invent data.  
• Resolve conflicting patient statements by preferring the **most specific or recent** information.  
• Preserve clinically important wording (e.g., “heart attack,” not “heart failure,” if that’s what was said).  
• Keep the entire note ≤ 250 words.
`;
</file>

<file path="src/lib/store.ts">
import { v4 as uuid } from "uuid";
import { Review } from "@/types";

export interface Encounter {
  id: string;
  csv: string;
  aiNote?: string;
  studentNote?: string;
  reviewJson?: Review;
  createdAt: Date;
}

// Use a single Map instance attached to globalThis
declare global {
  var __encounterStore: Map<string, Encounter> | undefined;
}

const globalStore = globalThis.__encounterStore;

export const db: Map<string, Encounter> =
  globalStore ?? (globalThis.__encounterStore = new Map());

export function newEncounter(csv: string): Encounter {
  const e: Encounter = { id: uuid(), csv, createdAt: new Date() };
  db.set(e.id, e);
  return e;
}
</file>

<file path="src/lib/utils.ts">
import { twMerge } from "tailwind-merge";
import { type ClassValue, clsx } from "clsx";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem
repomix-output.xml

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="src/app/documentation/page.tsx">
import Link from "next/link";
import { Card } from "@/components/ui/card";
import { Home, FileText } from "lucide-react";

export default function Documentation() {
  return (
    <>
      <nav className="bg-black/90 backdrop-blur-sm sticky top-0 z-[100]">
        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Link href="/" className="text-xl font-black text-white tracking-tight hover:text-gray-200 transition-colors flex items-center">
                <span className="mr-2">🧼</span>
                Project SOAP
              </Link>
            </div>
            <div className="flex items-center space-x-6">
              <Link href="/" className="text-white hover:text-gray-200 transition-colors flex items-center">
                <Home size={20} />
              </Link>
              <Link href="/documentation" className="text-white hover:text-gray-200 transition-colors font-medium flex items-center">
                <FileText size={20} />
              </Link>
            </div>
          </div>
        </div>
      </nav>
      
      <main className="container mx-auto max-w-6xl space-y-8 py-12 px-4 sm:px-6 lg:px-8">
        <Card>
          <div className="max-w-none">
            <h2 className="text-3xl font-bold mb-8 text-gray-900 dark:text-gray-100">How It Works</h2>
            
                         <div className="space-y-10">
               <div>
                 <h3 className="text-2xl font-semibold mb-6 text-gray-800 dark:text-gray-200 flex items-center">
                   <span className="bg-gray-600 dark:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg font-bold mr-3">1</span>
                   Generate SOAP Note
                 </h3>
                 <div className="ml-11 space-y-4">
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300"><strong>Input</strong>: Paste a full patient encounter transcript formatted as user, assistant. Be sure to include all relevant modules.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">The app parses the dialogue into clinician/patient turns using <code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">src/lib/parseCsv.ts</code>.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">A <strong>system prompt</strong> (<code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">src/lib/prompts.ts</code>) instructs the AI to produce a concise, markdown-formatted SOAP note.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">The transcript + prompt are sent to the <strong><code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">/api/generate</code></strong> endpoint, which calls the OpenAI API.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">The AI-generated SOAP note is stored in memory (<code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">src/lib/store.ts</code>) and displayed to the user.</p>
                     </div>
                   </div>
                 </div>
                 
                 {/* Expandable code block for prompts.ts */}
                 <div className="ml-11 mt-6">
                   <details className="group">
                     <summary className="cursor-pointer text-base font-semibold text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-gray-100 transition-colors flex items-center bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg px-4 py-3 hover:bg-gray-100 dark:hover:bg-gray-700">
                       <span className="mr-3 text-lg">▶</span>
                       <span className="group-open:hidden">Show SOAP generation prompt</span>
                       <span className="hidden group-open:inline">Hide SOAP generation prompt</span>
                     </summary>
                     <div className="mt-3 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                       <div className="bg-gray-50 dark:bg-gray-800 px-3 py-2 border-b border-gray-200 dark:border-gray-700">
                         <p className="text-xs font-mono text-gray-600 dark:text-gray-400">src/lib/prompts.ts</p>
                       </div>
                       <div className="max-h-80 overflow-y-auto">
                         <pre className="text-xs font-mono text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-900 p-4 whitespace-pre-wrap">{`export const systemSOAP = \`
You are a meticulous medical scribe. From the **patient's statements _and_ all actions ALREADY performed in this encounter** (ignore clinician questions), craft a concise **markdown** SOAP note.

## S – Subjective

**HPI (paragraph)** – Chief complaint, onset/chronology, quality, radiation, aggravating & relieving factors, pertinent positives **and** negatives, medication & risk-factor context.  
**ROS (≤ 6 bullets)** – Focused positives/negatives not already in HPI.

## O – Objective (≤ 6 bullets total)

• **Vitals**: write all provided vitals or "—"  
• **Physical Exam**: focused findings or "—"  
• **Diagnostics**: include **every** EKG/lab/imaging result mentioned; collapse duplicates (e.g., "ECG: ST-elevation V2–V4, T-wave inversion III"). Use "—" if none.

## A – Assessment

1–2 sentences: patient profile, pivotal findings, **ranked** leading differential (e.g., "ACS > unstable angina > pericarditis").

## P – Plan

### Completed (what _has already been done_)  
• List interventions that the transcript shows were **ordered _and_ acknowledged as carried out** (keywords: *administered, started, given, established, attached, initiated*).  
*Do **not** list these again in "Next".*

### Next (what is still pending)  
• Diagnostics, therapeutics, disposition **not yet performed** (≤ 6 bullets combined with "Completed").  
Use "—" if nothing remains.

---

### Formatting rules
• Third-person throughout ("Mr. Jones states …").  
• ≤ 6 bullets in ROS, Objective, and **combined** Plan sections.  
• Use "—" when information is absent; never invent data.  
• Resolve conflicting patient statements by preferring the **most specific or recent** information.  
• Preserve clinically important wording (e.g., "heart attack," not "heart failure," if that's what was said).  
• Keep the entire note ≤ 250 words.
\`;`}</pre>
                       </div>
                     </div>
                   </details>
                 </div>
               </div>

               <div>
                 <h3 className="text-2xl font-semibold mb-6 text-gray-800 dark:text-gray-200 flex items-center">
                   <span className="bg-gray-600 dark:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg font-bold mr-3">2</span>
                   Edit & Submit
                 </h3>
                 <div className="ml-11 space-y-4">
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Users can click <strong>&quot;Edit &amp; Review&quot;</strong> to refine the SOAP note.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Their edits are saved as the <strong>student note</strong> for the encounter.</p>
                     </div>
                   </div>
                 </div>
               </div>

               <div>
                 <h3 className="text-2xl font-semibold mb-6 text-gray-800 dark:text-gray-200 flex items-center">
                   <span className="bg-gray-600 dark:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg font-bold mr-3">3</span>
                   AI Review & Grading
                 </h3>
                 <div className="ml-11 space-y-4">
                   <p className="text-gray-700 dark:text-gray-300 mb-4">On submission, the <strong><code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">/api/review</code></strong> endpoint:</p>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Retrieves the original AI note and the student-edited note.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Uses a <strong>PDQI-9 scoring rubric</strong> with clinical appropriateness rules (<code className="text-sm bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200 px-2 py-1 rounded font-mono">src/app/api/review/route.ts</code>).</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Compares both notes against the encounter transcript.</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300 mb-2">Returns JSON with:</p>
                       <div className="ml-6 space-y-2">
                         <div className="flex items-start space-x-3">
                           <div className="w-1.5 h-1.5 bg-gray-400 dark:bg-gray-500 rounded-full mt-2.5 flex-shrink-0"></div>
                           <p className="text-gray-600 dark:text-gray-400"><strong>Scores</strong> for each PDQI-9 dimension</p>
                         </div>
                         <div className="flex items-start space-x-3">
                           <div className="w-1.5 h-1.5 bg-gray-400 dark:bg-gray-500 rounded-full mt-2.5 flex-shrink-0"></div>
                           <p className="text-gray-600 dark:text-gray-400"><strong>Delta scores</strong> (student vs. AI)</p>
                         </div>
                         <div className="flex items-start space-x-3">
                           <div className="w-1.5 h-1.5 bg-gray-400 dark:bg-gray-500 rounded-full mt-2.5 flex-shrink-0"></div>
                           <p className="text-gray-600 dark:text-gray-400"><strong>Per-dimension change comments</strong></p>
                         </div>
                         <div className="flex items-start space-x-3">
                           <div className="w-1.5 h-1.5 bg-gray-400 dark:bg-gray-500 rounded-full mt-2.5 flex-shrink-0"></div>
                           <p className="text-gray-600 dark:text-gray-400"><strong>Overall feedback</strong></p>
                         </div>
                       </div>
                     </div>
                   </div>
                 </div>
                 
                 {/* Expandable code block for review route */}
                 <div className="ml-11 mt-6">
                   <details className="group">
                     <summary className="cursor-pointer text-base font-semibold text-gray-800 dark:text-gray-200 hover:text-gray-900 dark:hover:text-gray-100 transition-colors flex items-center bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg px-4 py-3 hover:bg-gray-100 dark:hover:bg-gray-700">
                       <span className="mr-3 text-lg">▶</span>
                       <span className="group-open:hidden">Show AI review & grading code</span>
                       <span className="hidden group-open:inline">Hide AI review & grading code</span>
                     </summary>
                     <div className="mt-3 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
                       <div className="bg-gray-50 dark:bg-gray-800 px-3 py-2 border-b border-gray-200 dark:border-gray-700">
                         <p className="text-xs font-mono text-gray-600 dark:text-gray-400">src/app/api/review/route.ts</p>
                       </div>
                       <div className="max-h-80 overflow-y-auto">
                         <pre className="text-xs font-mono text-gray-800 dark:text-gray-200 bg-white dark:bg-gray-900 p-4 whitespace-pre-wrap">{`import { NextResponse } from "next/server";
import { openai } from "@/lib/openai";
import { db } from "@/lib/store";
import { clipText } from "@/lib/clipText";

const reviewPrompt = \`

You are an attending physician using the **PDQI-9** rubric with emphasis on **clinical appropriateness**.

Notes:
• NOTE_A = baseline AI-generated SOAP (reference)  
• NOTE_B = student-edited version

**CRITICAL: Use the CONTEXT transcript to judge clinical appropriateness. Inappropriate treatments/medications for the actual clinical scenario should receive LOW scores (1-2).**

Step 1 – Score BOTH notes (Likert 1-5 scale)
  • **Scoring Guidelines:**
    - **5**: Excellent, clinically appropriate, evidence-based
    - **4**: Good, mostly appropriate with minor issues
    - **3**: Adequate, some concerns but not harmful
    - **2**: Poor, inappropriate for clinical scenario or potentially harmful
    - **1**: Dangerous, contraindicated, or completely inappropriate

  • **Key Dimensions with Clinical Focus:**
    - **accurate**: Factually correct AND clinically appropriate for the case
    - **useful**: Helpful for patient care AND safe/appropriate treatments
    - **thorough**: Complete relevant info WITHOUT inappropriate additions
    - **up_to_date**: Current guidelines AND appropriate for this patient
    - **organized/comprehensible/succinct/synthesized/consistent**: Standard PDQI-9

  • **PENALIZE HEAVILY**: 
    - Wrong medications for the condition (e.g., antibiotics for MI)
    - Inappropriate treatments that don't match the clinical scenario
    - Dangerous or contraindicated interventions

Step 2 – Delta  
  • delta = score_B − score_A (range −4→+4).  
  • overall_delta = sum of deltas (range −36→+36).

Step 3 – Edit analysis  
  • **REQUIRED**: Create a "changes" entry for EVERY dimension with a non-zero delta.  
  • If delta ≠ 0, you MUST explain why that dimension score changed.  
  • For each non-zero delta:  
      – \\\`dimension\\\` name (exact PDQI-9 dimension that changed)  
      – \\\`impact\\\` improved | worsened | neutral  
      – \\\`snippet\\\` ≤20 words (specific text that caused the change)  
      – \\\`comment\\\` coaching ≤25 words explaining WHY the score changed

Return STRICT JSON only:

{
  "baseline_scores":    { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "student_scores":     { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "delta_scores":       { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "overall_delta": int,
  "changes": [
     { "dimension":str, "impact":str, "snippet":str, "comment":str }
  ],

  "global_comment": str
}\\\`;

export async function POST(req: Request) {
  const { id, studentNote } = await req.json();
  const enc = db.get(id);
  if (!enc?.aiNote) {
    return NextResponse.json({ error: "Encounter not found" }, { status: 404 });
  }
  enc.studentNote = studentNote;

  const transcript = clipText(enc.csv);
  console.log("Transcript chars:", transcript.length);

  const messages = [
    {
      role: "system" as const,
      content: reviewPrompt,
    },
    {
      role: "user" as const,
      name: "CONTEXT",
      content:
        "Full encounter transcript (User & Assistant turns):\\n\\"\\"\\"\\n" +
        transcript +
        "\\n\\"\\"\\"",
    },
    {
      role: "user" as const,
      name: "NOTE_A",
      content: enc.aiNote,
    },
    {
      role: "user" as const,
      name: "NOTE_B",
      content: studentNote,

    },
  ];

  const res = await openai.chat.completions.create({
    model: "gpt-4o",
    messages,
    temperature: 0,
    response_format: { type: "json_object" },
  });

  const rubric = JSON.parse(res.choices[0].message.content ?? "{}");
  enc.reviewJson = rubric;
  return NextResponse.json(rubric);
}`}</pre>
                       </div>
                     </div>
                   </details>
                 </div>
               </div>

               <div>
                 <h3 className="text-2xl font-semibold mb-6 text-gray-800 dark:text-gray-200 flex items-center">
                   <span className="bg-gray-600 dark:bg-gray-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-lg font-bold mr-3">4</span>
                   Feedback Display
                 </h3>
                 <div className="ml-11 space-y-4">
                   <p className="text-gray-700 dark:text-gray-300 mb-4">The UI presents a detailed breakdown:</p>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Scores and deltas per dimension</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Specific snippets causing score changes</p>
                     </div>
                   </div>
                   <div className="flex items-start space-x-3">
                     <div className="w-2 h-2 bg-gray-400 dark:bg-gray-500 rounded-full mt-2 flex-shrink-0"></div>
                     <div>
                       <p className="text-gray-700 dark:text-gray-300">Global comments for improvement</p>
                     </div>
                   </div>
                 </div>
               </div>
             </div>
          </div>
        </Card>
      </main>
    </>
  );
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Manrope } from "next/font/google";
import { Toaster } from "sonner";
import { Github } from "lucide-react";
import "./globals.css";

const manrope = Manrope({
  variable: "--font-manrope",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "SOAP Note Q3 Project",
  description: "AI-powered SOAP note generation from patient encounters",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${manrope.variable} antialiased`}
      >
        <Toaster richColors />
        {children}
        
        {/* Footer */}
        <footer className="mt-16 py-8 border-t border-white/20">
          <div className="container mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-center">
              <a 
                href="https://github.com/sidoody/proj-soap" 
                target="_blank" 
                rel="noopener noreferrer"
                className="text-white/60 hover:text-yellow-400 transition-colors"
              >
                <Github size={20} />
              </a>
            </div>
          </div>
        </footer>
      </body>
    </html>
  );
}
</file>

<file path="src/components/ui/button.tsx">
import { forwardRef, ButtonHTMLAttributes } from "react";
import { cn } from "@/lib/utils";

interface ButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: "default" | "secondary";
  loading?: boolean;
}
export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", loading, children, ...props }, ref) => (
    <button
      ref={ref}
      className={cn(
        "inline-flex items-center justify-center gap-2 rounded-md px-4 py-2 text-sm font-bold uppercase transition-colors disabled:opacity-50",
        variant === "default" &&
          "bg-yellow-400 text-black hover:bg-yellow-500 focus-visible:ring-yellow-300",
        variant === "secondary" &&
          "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-700 focus-visible:ring-gray-300 dark:focus-visible:ring-gray-600",
        className
      )}
      disabled={loading || props.disabled}
      {...props}
    >
      {loading && <span className="animate-spin h-4 w-4 border-2 border-current border-t-transparent rounded-full" />}
      {children}
    </button>
  )
);
Button.displayName = "Button";
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
  --card-background: #ffffff;
  --card-foreground: #171717;
  --border: #e5e7eb;
  --input-border: #d1d5db;
  --muted: #f9fafb;
  --muted-foreground: #6b7280;
  --accent: #f3f4f6;
  --accent-foreground: #1f2937;
  --primary: #1f2937;
  --primary-foreground: #ffffff;
  --secondary: #f3f4f6;
  --secondary-foreground: #1f2937;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-manrope);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
    --card-background: #1a1a1a;
    --card-foreground: #ededed;
    --border: #374151;
    --input-border: #4b5563;
    --muted: #111827;
    --muted-foreground: #9ca3af;
    --accent: #1f2937;
    --accent-foreground: #f3f4f6;
    --primary: #f3f4f6;
    --primary-foreground: #1f2937;
    --secondary: #374151;
    --secondary-foreground: #f3f4f6;
  }
}

body {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: var(--foreground);
  font-family: var(--font-manrope), system-ui, sans-serif;
  min-height: 100vh;
}

@media (prefers-color-scheme: dark) {
  body {
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
  }
}

/* Enhanced SOAP Note Formatting */
.soap-note {
  line-height: 1.7;
  font-feature-settings: "kern" 1, "liga" 1;
}

.soap-note h2 {
  letter-spacing: -0.025em;
}

.soap-note p {
  text-align: justify;
  hyphens: auto;
}

.soap-note ul {
  list-style: none;
}

.soap-note strong {
  font-weight: 600;
}

/* Improved readability for medical content */
.soap-note code {
  font-variant-numeric: tabular-nums;
}

/* Better spacing for nested content */
.soap-note li p {
  margin-bottom: 0.5rem;
}

.soap-note li:last-child {
  margin-bottom: 0;
}
</file>

<file path="README.md">
# 🧼 Project SOAP

An AI-powered medical documentation tool that generates and reviews SOAP notes from patient encounter transcripts.  
Built with **Next.js**, **OpenAI GPT-4o**, and **Tailwind CSS**.

---

## How It Works

### 1. Generate SOAP Note
- **Input**: Paste a full patient encounter transcript formatted as user, assistant. Be sure to include all relevant modules.
- The app parses the dialogue into clinician/patient turns (`src/lib/parseCsv.ts`).
- A **system prompt** (`src/lib/prompts.ts`) instructs the AI to produce a concise, markdown-formatted SOAP note.
- The transcript + prompt are sent to the **`/api/generate`** endpoint, which calls the OpenAI API.
- The AI-generated SOAP note is stored in memory (`src/lib/store.ts`) and displayed to the user.

### 2. Edit & Submit
- Users can click **"Edit & Review"** to refine the SOAP note.
- Their edits are saved as the **student note** for the encounter.

### 3. AI Review & Grading
- On submission, the **`/api/review`** endpoint:
  - Retrieves the original AI note and the student-edited note.
  - Uses a **PDQI-9 scoring rubric** with clinical appropriateness rules (`src/app/api/review/route.ts`).
  - Compares both notes against the encounter transcript.
  - Returns JSON with:
    - **Scores** for each PDQI-9 dimension.
    - **Delta scores** (student vs. AI).
    - **Per-dimension change comments**.
    - **Overall feedback**.

### 4. Feedback Display
- The UI presents a detailed breakdown:
  - Scores and deltas per dimension.
  - Specific snippets causing score changes.
  - Global comments for improvement.

---

## Tech Stack

- **Framework**: Next.js 15
- **Styling**: Tailwind CSS
- **AI**: OpenAI GPT-4o / GPT-4o-mini
- **Parsing**: PapaParse for CSV input
- **State**: In-memory store (Map)
- **UI Components**: Custom + Tailwind utilities
- **Icons**: Lucide React
- **Notifications**: Sonner

---

## Local Development

```bash
# Install dependencies
npm install

# Run development server
npm run dev

# Open in browser
http://localhost:3000
</file>

<file path="src/app/api/review/route.ts">
import { NextResponse } from "next/server";
import { openai } from "@/lib/openai";
import { db } from "@/lib/store";
import { clipText } from "@/lib/clipText";

const reviewPrompt = `

You are an attending physician using the **PDQI-9** rubric with emphasis on **clinical appropriateness**.

Notes:
• NOTE_A = baseline AI-generated SOAP (reference)  
• NOTE_B = student-edited version

**CRITICAL: Use the CONTEXT transcript to judge clinical appropriateness. Inappropriate treatments/medications for the actual clinical scenario should receive LOW scores (1-2).**

Step 1 – Score BOTH notes (Likert 1-5 scale)
  • **Scoring Guidelines:**
    - **5**: Excellent, clinically appropriate, evidence-based
    - **4**: Good, mostly appropriate with minor issues
    - **3**: Adequate, some concerns but not harmful
    - **2**: Poor, inappropriate for clinical scenario or potentially harmful
    - **1**: Dangerous, contraindicated, or completely inappropriate

  • **Key Dimensions with Clinical Focus:**
    - **accurate**: Factually correct AND clinically appropriate for the case
    - **useful**: Helpful for patient care AND safe/appropriate treatments
    - **thorough**: Complete relevant info WITHOUT inappropriate additions
    - **up_to_date**: Current guidelines AND appropriate for this patient
    - **organized/comprehensible/succinct/synthesized/consistent**: Standard PDQI-9

  • **PENALIZE HEAVILY**: 
    - Wrong medications for the condition (e.g., antibiotics for MI)
    - Inappropriate treatments that don't match the clinical scenario
    - Dangerous or contraindicated interventions

Step 2 – Delta  
  • delta = score_B − score_A (range −4→+4).  
  • overall_delta = sum of deltas (range −36→+36).

Step 3 – Edit analysis  
  • **REQUIRED**: Create a "changes" entry for EVERY dimension with a non-zero delta.  
  • If delta ≠ 0, you MUST explain why that dimension score changed.  
  • For each non-zero delta:  
      – \`dimension\` name (exact PDQI-9 dimension that changed)  
      – \`impact\` improved | worsened | neutral  
      – \`snippet\` ≤20 words (specific text that caused the change)  
      – \`comment\` coaching ≤25 words explaining WHY the score changed

Return STRICT JSON only:

{
  "baseline_scores":    { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "student_scores":     { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "delta_scores":       { "up_to_date":int, "accurate":int, "thorough":int, "useful":int, "organized":int, "comprehensible":int, "succinct":int, "synthesized":int, "consistent":int },
  "overall_delta": int,
  "changes": [
     { "dimension":str, "impact":str, "snippet":str, "comment":str }
  ],

  "global_comment": str
}`;

export async function POST(req: Request) {
  const { id, studentNote } = await req.json();
  const enc = db.get(id);
  if (!enc?.aiNote) {
    return NextResponse.json({ error: "Encounter not found" }, { status: 404 });
  }
  enc.studentNote = studentNote;

  const transcript = clipText(enc.csv);
  console.log("Transcript chars:", transcript.length);

  const messages = [
    {
      role: "system" as const,
      content: reviewPrompt,
    },
    {
      role: "user" as const,
      name: "CONTEXT",
      content:
        "Full encounter transcript (User & Assistant turns):\n\"\"\"\n" +
        transcript +
        "\n\"\"\"",
    },
    {
      role: "user" as const,
      name: "NOTE_A",
      content: enc.aiNote,
    },
    {
      role: "user" as const,
      name: "NOTE_B",
      content: studentNote,

    },
  ];

  const res = await openai.chat.completions.create({
    model: "gpt-4o",
    messages,
    temperature: 0,
    response_format: { type: "json_object" },
  });

  const rubric = JSON.parse(res.choices[0].message.content ?? "{}");
  enc.reviewJson = rubric;
  return NextResponse.json(rubric);
}
</file>

<file path="package.json">
{
  "name": "proj-soap",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "canvas-confetti": "^1.9.3",
    "classnames": "^2.5.1",
    "clsx": "^2.1.1",
    "framer-motion": "^12.23.12",
    "lucide-react": "^0.384.0",
    "next": "15.4.5",
    "openai": "^4.25.0",
    "papaparse": "^5.4.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-markdown": "^9.0.0",
    "sonner": "^1.2.4",
    "tailwind-merge": "^2.2.2",
    "uuid": "^9.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/canvas-confetti": "^1.9.0",
    "@types/node": "^20",
    "@types/papaparse": "^5.3.16",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/uuid": "^9.0.0",
    "eslint": "^9",
    "eslint-config-next": "15.4.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/app/page.tsx">
"use client";
import { useState } from "react";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { SOAPNote } from "@/components/ui/soap-note";
import { toast } from "sonner";
import Link from "next/link";
import { Home as HomeIcon, FileText } from "lucide-react";

export default function Home() {
  const [csv, setCsv] = useState("");
  const [aiNote, setAiNote] = useState("");
  const [id, setId] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const exampleContent = `--- Module: History ---
[10:28:26 PM] User: When did it start?
[10:28:27 PM] Assistant: Well, it began about a week ago.
[10:28:42 PM] User: Describe the pain
[10:28:42 PM] Assistant: It's a heavy, tight pressure right in the center of my chest.
[10:28:54 PM] User: How long does it last?
[10:28:55 PM] Assistant: It lasts for around 5 to 10 minutes before it eases up with rest.
[10:29:54 PM] User: What's your medical history
[10:29:54 PM] Assistant: Umm, can you be more specific about what you're asking?
[10:30:42 PM] User: Do you have any ongoing disease?
[10:30:43 PM] Assistant: I've been managing hypertension and cholesterol with medication.
[10:31:05 PM] User: Ever had an MI?
[10:31:06 PM] Assistant: I'm not quite sure what "MI" means. Could you explain that to me?
[10:31:17 PM] User: Ever had a heart attack?
[10:31:18 PM] Assistant: No, I've never had a heart attack before.
[10:31:34 PM] User: Ever had surgery?
[10:31:34 PM] Assistant: No, I've never had any surgery.
[10:31:41 PM] User: Allergies?
[10:31:42 PM] Assistant: No, I don't have any known allergies.
[10:32:08 PM] User: Which meds are you currently taking?
[10:32:08 PM] Assistant: I'm taking Hydrochlorothiazide for blood pressure and Atorvastatin for cholesterol.
[10:32:33 PM] User: What are your vitals?
[10:32:34 PM] Assistant: I'm not sure exactly. The doctors usually check them during my appointments, but I don't remember the specific numbers.
[10:33:17 PM] User: Any relevant family history?
[10:33:18 PM] Assistant: Yeah, my father had a heart attack at the age of 52.
[10:33:41 PM] User: Do you regularly consult with a cardiologist?
[10:33:41 PM] Assistant: I try to follow up regularly with my doctor, but it's been about six months since my last check-up.
[10:34:05 PM] User: Does the pain irradiate?
[10:34:06 PM] Assistant: Yes, sometimes it spreads and radiates into my left arm.
[10:34:24 PM] User: What are you doing when the pain appears?
[10:34:25 PM] Assistant: It usually happens during physical activity, like climbing stairs or hurrying somewhere.
[10:35:26 PM] User: Have you had any recent lab workup
[10:35:27 PM] Assistant: No, I haven't had any recent lab work done.
[10:36:09 PM] User: What does your diet look like
[10:36:10 PM] Assistant: Well, I try to eat healthy, but there are days when I skip meals or grab something quick and unhealthy because of work.
[10:36:23 PM] User: What are your habits?
[10:36:24 PM] Assistant: I jog regularly in the mornings before work, and I'm also a moderate smoker.
--- Module: Differential Diagnosis ---
[10:37:27 PM] User: Unstable angina
[10:37:28 PM] Assistant: Why do you think unstable angina is on your differential for Mr. Jones?
[10:38:33 PM] User: The pain lasts less than 40min, it alleviates with rest, he has a history of high cholesterol
[10:38:36 PM] Assistant: Yes, unstable angina is a strong consideration here. The chest pain lasting 5 to 10 minutes and resolving with rest is characteristic of angina. His history of high cholesterol and hypertension, along with a family history of heart disease, puts him at increased risk for coronary artery disease. What is the second condition on your differential?
[10:39:45 PM] User: We should rule out a myocardial infarction
[10:39:48 PM] Assistant: Consider using broad terms. "Acute Coronary Syndrome", which includes Myocardial Infarction or Unstable Angina, is a good way to phrase this possibility. Since you've already mentioned Unstable Angina, let's focus on another separate condition that could be causing his symptoms. What's another differential diagnosis you are considering?
[10:42:33 PM] User: Should we be considering a pulmonary embolism?
[10:42:35 PM] Assistant: Yes, a pulmonary embolism is a valid consideration. Given his recent travel history and periods of immobility, combined with smoking, they are risk factors for venous thromboembolism. Sudden onset chest pain could point towards a pulmonary embolism. What's the third condition on your differential?
[10:43:11 PM] User: Panic attacks
[10:43:13 PM] Assistant: While panic attacks can present with chest pain, in this scenario, we should prioritize ruling out potentially life-threatening cardiac or pulmonary conditions first. Could you suggest another condition that could be causing his symptoms?
[10:43:38 PM] User: Can you guide my thought?
[10:43:40 PM] Assistant: Certainly. Consider conditions that could involve inflammation around the heart or increases in pressure on the heart. These could be attributed to recent respiratory symptoms or a history of chronic tension and stress, affecting the heart or its surrounding structures. What's another diagnosis you might consider?
[10:43:56 PM] User: Myocarditis
[10:43:58 PM] Assistant: Myocarditis is a reasonable consideration given his recent cold, as viral infections can sometimes lead to inflammation of the heart muscle. This could cause chest pain and explain his symptoms. Now that we've discussed three conditions, let's proceed with the case.
--- Module: Results Interpretation ---
[10:46:44 PM] User: Normal rate - between 100 and 75, maybe high 80s.
[10:46:45 PM] Assistant: Hmm, I would suggest double-checking that rate. Try to determine it more precisely.
[10:48:26 PM] User: 75 bpm
[10:48:27 PM] Assistant: Good, that rate is within normal range. What about the rhythm? Do you notice anything specific?
[10:48:38 PM] User: Sinus rhythm
[10:48:39 PM] Assistant: Correct, it is a regular sinus rhythm. Are there any noticeable ST changes on the EKG?
[10:48:48 PM] User: No ST changes
[10:48:49 PM] Assistant: Great, that's correct: there are no ST changes. Please continue to the next step to continue with the case.
--- Module: Re-Evaluation ---
[10:50:14 PM] User: Looks like and anterior STEMI
[10:50:15 PM] Assistant: Alright, recognizing those changes on the EKG is important. What would you like us to do next for Mr. Jones?
[10:50:40 PM] User: Prep him for cath lab
[10:50:41 PM] Assistant: Understood, I'll notify the cath lab and ensure they're ready for Mr. Jones. What else would you like to address while we're preparing him?
[10:50:58 PM] User: What's his BP?
[10:50:59 PM] Assistant: Let me check that for you. Mr. Jones's blood pressure is currently 160/95. What would you like to do next?
[10:51:19 PM] User: Let's give him labetalol to lower it
[10:51:20 PM] Assistant: We can certainly work on managing his blood pressure. I'll prepare the labetalol for administration. Is there anything else you would like to address for Mr. Jones right now?
[10:51:46 PM] User: Do we have the troponin value?
[10:51:47 PM] Assistant: Let's see... Mr. Jones's initial troponin level is elevated, indicating cardiac involvement. What would you like to do with this information?
[10:52:47 PM] User: Let's hook him to a monitor
[10:52:49 PM] Assistant: We'll get Mr. Jones on the monitor right away to keep a close eye on his vitals. What would you like to do next?
[10:53:04 PM] User: What are his vitals now?
[10:53:05 PM] Assistant: Okay, let me check that for you. Mr. Jones's current vitals are:
- Blood pressure: 160/95
- Heart rate: 100 beats per minute
- Respiratory rate: 20 breaths per minute
- Oxygen saturation: 96% on room air
Is there anything specific you'd like to do with this information?
[10:53:46 PM] User: Let's give his sublingual nitro
[10:53:48 PM] Assistant: Alright, I'll administer the sublingual nitroglycerin to help with his chest pain. What would you like us to focus on next?
[10:54:15 PM] User: Let's have a crash cart ready
[10:54:16 PM] Assistant: We'll make sure the crash cart is at the ready, just in case. What other steps would you like us to take for Mr. Jones?
[10:55:34 PM] User: Guide my thought
[10:55:35 PM] Assistant: I understand this can feel like a lot to manage. Your focus on ensuring Mr. Jones's stability is key. Please let me know how you'd like to proceed with his care.
[10:55:58 PM] User: Should we give him some fluids?
[10:55:59 PM] Assistant: We can start an IV line for Mr. Jones, which will allow us to give fluids if needed. Would you like us to proceed with establishing IV access and anything else?
[10:56:18 PM] User: Stablish an IV
[10:56:19 PM] Assistant: I'll go ahead and establish IV access for Mr. Jones. Is there anything else you'd like to address for his ongoing care?
[10:56:36 PM] User: Notify family
[10:56:37 PM] Assistant: I'll arrange for someone to notify Mr. Jones's family about his condition and that he's being prepared for further treatment. Is there anything else you'd like to do right now?
[10:57:09 PM] User: Take another ekg
[10:57:11 PM] Assistant: Alright, we'll go ahead and perform another EKG to monitor any changes. Meanwhile, is there anything else you would like to address with Mr. Jones?
[10:57:45 PM] User: Do an echo
[10:57:46 PM] Assistant: An echo can provide valuable information about Mr. Jones's heart function. I'll make arrangements for an echocardiogram. In the meantime, is there anything else you'd like to do?
[10:58:02 PM] User: Any suggestions?
[10:58:03 PM] Assistant: I'm here to assist with what you decide is best for Mr. Jones. You've made some important decisions so far. Please let me know how you'd like to continue with his care.
[10:59:04 PM] User: Let's control the rate
[10:59:05 PM] Assistant: To control Mr. Jones's heart rate, we can consider medications like beta-blockers which you've already mentioned, we'll continue with that approach. Is there anything else you'd like us to do for him?
[10:59:47 PM] User: Give him aspirin
[10:59:48 PM] Assistant: I'll administer aspirin to Mr. Jones as part of his treatment plan. Is there anything else you'd like us to focus on?
[11:01:34 PM] User: Fibrinolytic
[11:01:35 PM] Assistant: Given Mr. Jones's condition, administering a fibrinolytic can be considered if he's not immediately headed for the cath lab. Please clarify if there's something more you'd like to do at this stage?
[11:01:55 PM] User: Anticoagulation
[11:01:56 PM] Assistant: Alright, we'll start anticoagulation therapy for Mr. Jones. What would you like to do next?`;

  const handleCopyExample = async () => {
    try {
      await navigator.clipboard.writeText(exampleContent);
      toast.success("Example copied to clipboard!");
    } catch (err) {
      toast.error("Failed to copy to clipboard");
    }
  };

  async function handleGenerate() {
    try {
      setLoading(true);
      const res = await fetch("/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ csv }),
      });
      if (!res.ok) throw new Error("OpenAI error");
      const { id, aiNote } = await res.json();
      setId(id);
      setAiNote(aiNote);
    } catch (e) {
      toast.error((e as Error).message || "Something went wrong");
    } finally {
      setLoading(false);
    }
  }

  return (
    <>
      <nav className="bg-black/90 backdrop-blur-sm sticky top-0 z-[100]">
        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Link href="/" className="text-xl font-black text-white tracking-tight hover:text-gray-200 transition-colors flex items-center">
                <span className="mr-2">🧼</span>
                Project SOAP
              </Link>
            </div>
            <div className="flex items-center space-x-6">
              <Link href="/" className="text-white hover:text-gray-200 transition-colors font-medium flex items-center">
                <HomeIcon size={20} />
              </Link>
              <Link href="/documentation" className="text-white hover:text-gray-200 transition-colors flex items-center">
                <FileText size={20} />
              </Link>
            </div>
          </div>
        </div>
      </nav>
      <main className="container mx-auto max-w-4xl space-y-8 py-12 px-4 sm:px-6 lg:px-8">
      
      <Card>
        <h1 className="mb-4 text-xl font-semibold text-gray-900 dark:text-gray-100">Paste encounter log</h1>
        <p className="mb-4 text-gray-600 dark:text-gray-400">
          Paste the complete patient interaction into the space below.
        </p>
        <p className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Example of expected input:</p>
        <div className="mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-md border-l-4 border-blue-400 dark:border-blue-500 relative">
          <button
            onClick={handleCopyExample}
            className="absolute top-3 right-3 p-1 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 hover:bg-gray-200 dark:hover:bg-gray-700 rounded transition-colors z-10"
            title="Copy example to clipboard"
          >
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M16 1H4C2.9 1 2 1.9 2 3V17H4V3H16V1ZM19 5H8C6.9 5 6 5.9 6 7V21C6 22.1 6.9 23 8 23H19C20.1 23 21 22.1 21 21V7C21 5.9 20.1 5 19 5ZM19 21H8V7H19V21Z" fill="currentColor"/>
            </svg>
          </button>
          <div className="relative">
            <pre className="text-xs text-gray-600 dark:text-gray-400 font-mono whitespace-pre-wrap break-words overflow-y-scroll max-h-32 pr-8">
{exampleContent}
            </pre>
            <div className="absolute bottom-0 left-0 right-0 h-4 bg-gradient-to-t from-gray-50 dark:from-gray-800 to-transparent pointer-events-none"></div>
          </div>
        </div>
        <Textarea
          rows={10}
          placeholder="--- Module: History --- …"
          value={csv}
          onChange={(e) => setCsv(e.target.value)}
          className="mb-4"
        />
        <Button loading={loading} onClick={handleGenerate} disabled={!csv}>
          Generate SOAP
        </Button>
      </Card>

      {loading && <Skeleton className="h-48 w-full" />}

      {aiNote && (
        <Card>
          <h2 className="mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100">AI-Generated SOAP</h2>
          <SOAPNote content={aiNote} />
          {id && (
            <Link href={`/note/${id}`} className="mt-4 inline-block underline text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300">
              Edit & Review →
            </Link>
          )}
        </Card>
      )}
    </main>
    </>
  );
}
</file>

<file path="src/app/note/[id]/page.tsx">
"use client";
import React, { useEffect, useState } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { SOAPNote } from "@/components/ui/soap-note";
import { toast } from "sonner";
import { Review, ReviewChange } from "@/types";
import Link from "next/link";
import { Home, FileText } from "lucide-react";

// Review component for displaying feedback
function ReviewDisplay({ review }: { review: Review }) {
  const dimensionNames = {
    up_to_date: "Up-to-Date",
    accurate: "Accurate", 
    thorough: "Thorough",
    useful: "Useful",
    organized: "Organized",
    comprehensible: "Comprehensible",
    succinct: "Succinct",
    synthesized: "Synthesized",
    consistent: "Consistent"
  };


  const getDeltaColor = (delta: number) => {
    if (delta >= 2) return "text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20";
    if (delta >= 0) return "text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20";

    return "text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20";
  };

  const getImpactColor = (impact: string) => {
    if (impact === "improved") return "text-green-600 dark:text-green-400 bg-green-100 dark:bg-green-900/30";
    if (impact === "worsened") return "text-red-600 dark:text-red-400 bg-red-100 dark:bg-red-900/30";
    return "text-gray-600 dark:text-gray-400 bg-gray-100 dark:bg-gray-800";
  };

  // Group changes by dimension
  const changesByDimension = (review.changes || []).reduce((acc: Record<string, ReviewChange[]>, change: ReviewChange) => {
    if (!acc[change.dimension]) acc[change.dimension] = [];
    acc[change.dimension].push(change);
    return acc;
  }, {} as Record<string, ReviewChange[]>);

  return (
    <div className="mt-6 space-y-4">

      {/* PDQI-9 Detailed Scoring */}
      <div className="space-y-4">
        <h3 className="font-semibold text-lg text-gray-900 dark:text-gray-100">PDQI-9 Detailed Scoring</h3>
        
        {/* Score Summary Table */}
        <div className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
          <div className="bg-gray-50 dark:bg-gray-800 p-3 border-b border-gray-200 dark:border-gray-700">
            <div className="grid grid-cols-4 gap-2 text-sm font-medium text-gray-700 dark:text-gray-300">
              <div>Dimension</div>
              <div className="text-center">Baseline</div>
              <div className="text-center">Student</div>
              <div className="text-center">Delta</div>

            </div>
          </div>
          {Object.entries(dimensionNames).map(([key, name]) => {
            const baselineScore = review.baseline_scores?.[key] || 0;
            const studentScore = review.student_scores?.[key] || 0;
            const deltaScore = review.delta_scores?.[key] || 0;
            
            return (
              <div key={key} className="p-3 border-b border-gray-100 dark:border-gray-700 last:border-b-0 bg-white dark:bg-gray-900">
                <div className="grid grid-cols-4 gap-2 text-sm">
                  <div className="font-medium text-gray-900 dark:text-gray-100">{name}</div>
                  <div className="text-center text-gray-600 dark:text-gray-400">{baselineScore}/5</div>
                  <div className="text-center text-gray-600 dark:text-gray-400">{studentScore}/5</div>
                  <div className={`text-center font-semibold px-2 py-1 rounded ${getDeltaColor(deltaScore)}`}>
                    {deltaScore > 0 ? '+' : ''}{deltaScore}
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* Individual Dimension Details */}
        {Object.entries(dimensionNames).map(([key, name]) => {
          const deltaScore = review.delta_scores?.[key] || 0;
          const dimensionChanges = changesByDimension[key] || [];
          
          if (dimensionChanges.length === 0) return null;
          
          return (
            <div key={key} className={`border border-gray-200 dark:border-gray-700 rounded-lg p-4 ${getDeltaColor(deltaScore)}`}>
              <div className="flex items-center justify-between mb-3">
                <h4 className="font-medium text-gray-900 dark:text-gray-100">{name}</h4>
                <span className="font-semibold text-lg">
                  {deltaScore > 0 ? '+' : ''}{deltaScore}
                </span>
              </div>
              
              {/* Changes for this dimension */}
              <div className="space-y-2">
                {dimensionChanges.map((change: ReviewChange, index: number) => (
                  <div key={index} className="bg-white dark:bg-gray-800/50 bg-opacity-50 rounded p-3 border-l-4 border-gray-300 dark:border-gray-600">
                    <div className="flex items-center gap-2 mb-1">
                      <span className={`font-medium text-sm px-2 py-1 rounded ${getImpactColor(change.impact)}`}>
                        {change.impact}
                      </span>
                      <span className="text-xs text-gray-600 dark:text-gray-400 font-mono bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">
                        &quot;{change.snippet}&quot;
                      </span>
                    </div>
                    <p className="text-sm text-gray-700 dark:text-gray-300">{change.comment}</p>
                  </div>
                ))}
              </div>
            </div>
          );
        })}
      </div>

      {/* Global Comment */}
      {review.global_comment && (
        <div className="border border-blue-200 dark:border-blue-700 rounded-lg p-4 bg-blue-50 dark:bg-blue-900/20">
          <h3 className="font-semibold text-lg mb-2 text-gray-900 dark:text-gray-100">Overall Feedback</h3>
          <p className="text-gray-700 dark:text-gray-300">{review.global_comment}</p>
        </div>
      )}
    </div>
  );
}

export default function NotePage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = React.use(params);
  const [aiNote, setAiNote] = useState<string | null>(null);
  const [student, setStudent] = useState("");
  const [review, setReview] = useState<Review | null>(null);
  const [saving, setSaving] = useState(false);

  // fetch encounter once
  useEffect(() => {
    fetch(`/api/debug?id=${id}`)
      .then((r) => r.ok ? r.json() : Promise.reject("Not found"))
      .then((d) => {
        setAiNote(d.aiNote);
        setStudent(d.studentNote ?? d.aiNote);
        setReview(d.reviewJson ?? null);
      })
      .catch(() => toast.error("Encounter not found"));
  }, [id]);

  async function handleSubmit() {
    try {
      setSaving(true);
      const r = await fetch("/api/review", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id, studentNote: student }),
      });
      if (!r.ok) throw new Error("Review failed");
      setReview(await r.json());
    } catch (e) {
      toast.error((e as Error).message);
    } finally {
      setSaving(false);
    }
  }

  return (
    <>
      <nav className="bg-black/90 backdrop-blur-sm sticky top-0 z-[100]">
        <div className="container mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <Link href="/" className="text-xl font-black text-white tracking-tight hover:text-gray-200 transition-colors flex items-center">
                <span className="mr-2">🧼</span>
                Project SOAP
              </Link>
            </div>
            <div className="flex items-center space-x-6">
              <Link href="/" className="text-white hover:text-gray-200 transition-colors flex items-center">
                <Home size={20} />
              </Link>
              <Link href="/documentation" className="text-white hover:text-gray-200 transition-colors flex items-center">
                <FileText size={20} />
              </Link>
            </div>
          </div>
        </div>
      </nav>
      <main className="container mx-auto max-w-6xl space-y-8 py-8 px-4 sm:px-6 lg:px-8">
      {!aiNote ? (
        <Skeleton className="h-64 w-full" />
      ) : (
        <div className="grid gap-6 md:grid-cols-2">
          <Card className="overflow-auto">
            <h2 className="mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100">AI SOAP (read-only)</h2>
            <SOAPNote content={aiNote} />
          </Card>

          <Card>
            <h2 className="mb-2 text-lg font-semibold text-gray-900 dark:text-gray-100">Your SOAP (edit)</h2>
            <Textarea
              rows={18}
              value={student}
              onChange={(e) => setStudent(e.target.value)}
            />
            <Button loading={saving} className="mt-4" onClick={handleSubmit}>
              Submit for Review
            </Button>

            {review && <ReviewDisplay review={review} />}
          </Card>
        </div>
      )}
    </main>
    </>
  );
}
</file>

</files>
